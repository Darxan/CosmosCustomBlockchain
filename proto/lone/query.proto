syntax = "proto3";
package darxan.lone.lone;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "lone/params.proto";
import "lone/whois.proto";
import "lone/customTransaction.proto";

import "lone/customtx.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/darxan/lone/x/lone/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/darxan/lone/lone/params";
  }
  // Queries a Whois by index.
	rpc Whois(QueryGetWhoisRequest) returns (QueryGetWhoisResponse) {
		option (google.api.http).get = "/darxan/lone/lone/whois/{index}";
	}

	// Queries a list of Whois items.
	rpc WhoisAll(QueryAllWhoisRequest) returns (QueryAllWhoisResponse) {
		option (google.api.http).get = "/darxan/lone/lone/whois";
	}

// Queries a list of Customtransactions items.
	rpc Customtransactions(QueryCustomtransactionsRequest) returns (QueryCustomtransactionsResponse) {
		option (google.api.http).get = "/darxan/lone/lone/customtransactions";
	}



// Queries a Customtx by index.
	rpc Customtx(QueryGetCustomtxRequest) returns (QueryGetCustomtxResponse) {
		option (google.api.http).get = "/darxan/lone/lone/customtx/{index}";
	}

	// Queries a list of Customtx items.
	rpc CustomtxAll(QueryAllCustomtxRequest) returns (QueryAllCustomtxResponse) {
		option (google.api.http).get = "/darxan/lone/lone/customtx";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetWhoisRequest {
	  string index = 1;

}

message QueryGetWhoisResponse {
	Whois whois = 1 [(gogoproto.nullable) = false];
}

message QueryAllWhoisRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllWhoisResponse {
	repeated Whois whois = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryCustomtransactionsRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryCustomtransactionsResponse {
  string sender = 1;
  string receiver = 2;
  repeated CustomTransaction CustomTransaction = 3;
  cosmos.base.query.v1beta1.PageResponse pagination = 4;
}


message QueryGetCustomtxRequest {
	  string index = 1;

}

message QueryGetCustomtxResponse {
	Customtx customtx = 1 [(gogoproto.nullable) = false];
}

message QueryAllCustomtxRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCustomtxResponse {
	repeated Customtx customtx = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
